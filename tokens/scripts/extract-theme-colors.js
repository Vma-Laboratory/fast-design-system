/* eslint-disable no-console */
const StyleDictionaryPackage = require("style-dictionary");
const light = require("../figma/output/light.json");
const dark = require("../figma/output/dark.json");

module.exports = function () {
  /**
   * Custom format that generate javascript dictionnary containing all the value per theme
   */
  StyleDictionaryPackage.registerFormat({
    name: "fast/design-tokens-theme-values",
    formatter({ dictionary }) {
      return (
        "/* DO NOT EDIT THIS FILE ! */\n" +
        "/* This file has been generated by the pipeline*/\n" +
        `import { Theme } from "../types/theme.type";\n\n` +
        "export const theme: Theme = " +
        `{\n${dictionary.allProperties
          .map((token) => `\t${token.name}: "${token.value}"`)
          .join(",\n")}\n}`
      );
    },
  });

  /**
   * Custom format that generate typecripts file containing all the types for the themes
   */
  StyleDictionaryPackage.registerFormat({
    name: "fast/design-tokens-theme-types",
    formatter({ dictionary }) {
      return (
        "/* DO NOT EDIT THIS FILE ! */\n" +
        "/* This file has been generated by the pipeline*/\n" +
        "export type Theme = " +
        `{\n${dictionary.allProperties
          .map((token) => `\t${token.name}: string`)
          .join(";\n")}\n}`
      );
    },
  });

  // HAVE THE STYLE DICTIONARY CONFIG DYNAMICALLY GENERATED
  function getStyleDictionaryConfig(tokensConfig = {}) {
    const { brand, tokens } = tokensConfig;
    return {
      tokens,
      platforms: {
        web: {
          transformGroup: "web",
          prefix: "fpsfa",
          buildPath: "./src/",
          files: [
            {
              destination: `themes/${brand}Theme.ts`,
              format: "fast/design-tokens-theme-values",
              filter: (token) => token.type === "color",
            },
          ],
          transforms: ["name/cti/camel"],
        },
      },
    };
  }
  const configs = [
    {
      brand: "dark",
      tokens: dark,
    },
    {
      brand: "light",
      tokens: light,
    },
  ];

  configs.map((config) => {
    console.log("\n==============================================");
    console.log(`\nProcessing:  [Web] [${config.brand}]`);

    const StyleDictionary = StyleDictionaryPackage.extend(
      getStyleDictionaryConfig(config)
    );
    StyleDictionary.buildPlatform("web");

    console.log("\nEnd processing");
  });

  console.log("\n==============================================");
  console.log(`\nProcessing:  [Web] [Themes-Types]`);

  const StyleDictionary = StyleDictionaryPackage.extend({
    tokens: light,
    platforms: {
      web: {
        transformGroup: "web",
        prefix: "fpsfa",
        buildPath: "./src/",
        files: [
          {
            destination: `types/theme.type.ts`,
            format: "fast/design-tokens-theme-types",
            filter: (token) => token.type === "color",
          },
        ],
        transforms: ["name/cti/camel"],
      },
    },
  });
  StyleDictionary.buildPlatform("web");

  console.log("\nEnd processing");
};
